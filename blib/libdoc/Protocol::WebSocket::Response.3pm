.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Protocol::WebSocket::Response 3pm"
.TH Protocol::WebSocket::Response 3pm "2017-03-05" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Protocol::WebSocket::Response \- WebSocket Response
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # Constructor
\&    $res = Protocol::WebSocket::Response\->new(
\&        host          => \*(Aqexample.com\*(Aq,
\&        resource_name => \*(Aq/demo\*(Aq,
\&        origin        => \*(Aqfile://\*(Aq,
\&        number1       => 777_007_543,
\&        number2       => 114_997_259,
\&        challenge     => "\ex47\ex30\ex22\ex2D\ex5A\ex3F\ex47\ex58"
\&    );
\&    $res\->to_string; # HTTP/1.1 101 WebSocket Protocol Handshake
\&                     # Upgrade: WebSocket
\&                     # Connection: Upgrade
\&                     # Sec\-WebSocket\-Origin: file://
\&                     # Sec\-WebSocket\-Location: ws://example.com/demo
\&                     #
\&                     # 0st3Rl&q\-2ZU^weu
\&
\&    # Parser
\&    $res = Protocol::WebSocket::Response\->new;
\&    $res\->parse("HTTP/1.1 101 WebSocket Protocol Handshake\ex0d\ex0a");
\&    $res\->parse("Upgrade: WebSocket\ex0d\ex0a");
\&    $res\->parse("Connection: Upgrade\ex0d\ex0a");
\&    $res\->parse("Sec\-WebSocket\-Origin: file://\ex0d\ex0a");
\&    $res\->parse("Sec\-WebSocket\-Location: ws://example.com/demo\ex0d\ex0a");
\&    $res\->parse("\ex0d\ex0a");
\&    $res\->parse("0st3Rl&q\-2ZU^weu");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Construct or parse a WebSocket response.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .SS """host"""
.el .SS "\f(CWhost\fP"
.IX Subsection "host"
.ie n .SS """location"""
.el .SS "\f(CWlocation\fP"
.IX Subsection "location"
.ie n .SS """origin"""
.el .SS "\f(CWorigin\fP"
.IX Subsection "origin"
.ie n .SS """resource_name"""
.el .SS "\f(CWresource_name\fP"
.IX Subsection "resource_name"
.ie n .SS """secure"""
.el .SS "\f(CWsecure\fP"
.IX Subsection "secure"
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
Create a new Protocol::WebSocket::Response instance.
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&    $res\->parse($buffer);
.Ve
.PP
Parse a WebSocket response. Incoming buffer is modified.
.ie n .SS """to_string"""
.el .SS "\f(CWto_string\fP"
.IX Subsection "to_string"
Construct a WebSocket response.
.ie n .SS """cookie"""
.el .SS "\f(CWcookie\fP"
.IX Subsection "cookie"
.ie n .SS """cookies"""
.el .SS "\f(CWcookies\fP"
.IX Subsection "cookies"
.ie n .SS """key"""
.el .SS "\f(CWkey\fP"
.IX Subsection "key"
.ie n .SS """key1"""
.el .SS "\f(CWkey1\fP"
.IX Subsection "key1"
.Vb 1
\&    $self\->key1;
.Ve
.PP
Set or get \f(CW\*(C`Sec\-WebSocket\-Key1\*(C'\fR field.
.ie n .SS """key2"""
.el .SS "\f(CWkey2\fP"
.IX Subsection "key2"
.Vb 1
\&    $self\->key2;
.Ve
.PP
Set or get \f(CW\*(C`Sec\-WebSocket\-Key2\*(C'\fR field.
.ie n .SS """number1"""
.el .SS "\f(CWnumber1\fP"
.IX Subsection "number1"
.Vb 2
\&    $self\->number1;
\&    $self\->number1(123456);
.Ve
.PP
Set or extract from \f(CW\*(C`Sec\-WebSocket\-Key1\*(C'\fR generated \f(CW\*(C`number\*(C'\fR value.
.ie n .SS """number2"""
.el .SS "\f(CWnumber2\fP"
.IX Subsection "number2"
.Vb 2
\&    $self\->number2;
\&    $self\->number2(123456);
.Ve
.PP
Set or extract from \f(CW\*(C`Sec\-WebSocket\-Key2\*(C'\fR generated \f(CW\*(C`number\*(C'\fR value.
.ie n .SS """status"""
.el .SS "\f(CWstatus\fP"
.IX Subsection "status"
.Vb 1
\&    $self\->status;
.Ve
.PP
Get response status (101).
.ie n .SS """body"""
.el .SS "\f(CWbody\fP"
.IX Subsection "body"
.Vb 1
\&    $self\->body;
.Ve
.PP
Get response body.
.ie n .SS """headers"""
.el .SS "\f(CWheaders\fP"
.IX Subsection "headers"
.Vb 1
\&    my $arrayref = $self\->headers;
.Ve
.PP
Get response headers.
